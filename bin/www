#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const WebSocket = require('ws');
const crypto = require('crypto');
var debug = require('debug')('long-chess:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Session class
 */
class Session {
  constructor(sessionId, initSide) {
    this.sessionId = sessionId;
    this.initSide = initSide;
    this.currMove = 1;
    this.players = 1;
    this.sockets = { 0: null, 1: null };
  }
}

/**
 * WebSocket setup
 */
const wss = new WebSocket.Server({ server });
var SESSIONS = {}

wss.on('connection', (ws) => {
  ws.on('message', msg => {
    msgData = JSON.parse(msg);
    switch (msgData.type) {
      case 'connect':
        let success = false;
        let sessionId = null;
        let assignedSide = -1;

        if (msgData.code === null) {
          sessionId = crypto.createHash('shake256', { outputLength: 3 }).update(Date.now().toString()).digest('hex');
          assignedSide = Math.floor(Math.random() * 2);

          SESSIONS[sessionId] = new Session(sessionId, assignedSide);

          console.log(`Created new session with ID ${sessionId}.`);
          success = true;
        } else {
          if (SESSIONS[msgData.code] != null && SESSIONS[msgData.code].players < 2) {
            sessionId = msgData.code;
            assignedSide = 1 - SESSIONS[msgData.code].initSide;
            SESSIONS[msgData.code].players++;
            console.log(`Connected to existing session ${msgData.code}.`);
            success = true;
          } else {
            console.log(`User attempted to connect to invalid session ${msgData.code}`);
          }
        }

        if (success) {
          ws.send(JSON.stringify({ type: 'id', content: sessionId, side: assignedSide }));
          SESSIONS[sessionId].sockets[assignedSide] = ws;
          if (SESSIONS[sessionId].players == 2) {
            for (var i = 0; i < 2; i++) {
              SESSIONS[sessionId].sockets[i].send(JSON.stringify({ type: 'start' }))
            }
          }
        }
        else ws.send(JSON.stringify({ type: 'id', content: null }));
        break;
      case 'move':
      case 'promote':
        SESSIONS[msgData.sessionId].sockets[1-msgData.side].send(JSON.stringify(msgData));
        break;
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
